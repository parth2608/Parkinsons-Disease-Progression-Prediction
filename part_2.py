# -*- coding: utf-8 -*-
"""IDMP Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kU-gymaf3kpIif3gNxl7SOW3ZvtWvgYr
"""

import numpy as np 
import pandas as pd 
from google.colab import drive
drive.mount('/content/drive')

import warnings
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import BayesianRidge
from sklearn.linear_model import ARDRegression
from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import SGDRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
warnings.simplefilter(action='ignore')

train_clinical_data = pd.read_csv("/content/drive/My Drive/IDMP/train_clinical_data.csv")
train_peptides = pd.read_csv("/content/drive/My Drive/IDMP/train_peptides.csv")
train_protiens = pd.read_csv("/content/drive/My Drive/IDMP/train_proteins.csv")
supplemental_clinical_data = pd.read_csv("/content/drive/My Drive/IDMP/supplemental_clinical_data.csv")
sample_submission = pd.read_csv("/content/drive/My Drive/IDMP/sample_submission.csv")
test = pd.read_csv("/content/drive/My Drive/IDMP/test.csv")
test_peptides = pd.read_csv("/content/drive/My Drive/IDMP/test_peptides.csv")
test_protein = pd.read_csv("/content/drive/My Drive/IDMP/test_proteins.csv")
model_performance = pd.read_csv("/content/drive/My Drive/IDMP/modelPerformance.csv")
train = train_clinical_data.append(supplemental_clinical_data,ignore_index=True)

train

test



train.head(5)

test.head()

train.dropna(inplace=True)

train

train_peptides

zeros_per_column = (train == 0.0).sum()
print(zeros_per_column)

train_clinical = pd.read_csv("/content/drive/My Drive/IDMP/train_clinical_data.csv")
train_clin = train_clinical.copy()
train_clinical['id_full'] = train_clinical['patient_id'].astype(str)  + '_' + train_clinical['visit_month'].astype(str) + '_' + train_clinical['visit_id'].astype(str)
train_clinical = train_clinical.drop(columns=['visit_id', 'patient_id', 'visit_month'])
train_clinical = train_clinical.set_index('id_full')
train_protiens['id_full'] = train_protiens['patient_id'].astype(str)  + '_' + train_protiens['visit_month'].astype(str) + '_' + train_protiens['visit_id'].astype(str)
train_proteins_pivotted = train_protiens.pivot(index='id_full', columns='UniProt', values='NPX')
clinical_joined_inner = train_clinical.join(train_proteins_pivotted, on="id_full", how="inner")
clinical_joined_inner['updrs_4'] = clinical_joined_inner['updrs_4'].fillna(0)
clinical_joined_inner['upd23b_clinical_state_on_medication'] = clinical_joined_inner['upd23b_clinical_state_on_medication'].fillna("Off")
clinical_joined_inner = clinical_joined_inner.fillna(0)
clinical_joined_inner['upd23b_clinical_state_on_medication'].replace(['Off', 'On'],
                        [0, 1], inplace=True)
clinical_joined_inner = clinical_joined_inner.drop('upd23b_clinical_state_on_medication', axis=1)
clinical_joined_inner = clinical_joined_inner.reindex(sorted(clinical_joined_inner.columns), axis=1)

train_linear_X = train.copy()
train, test = train_test_split(clinical_joined_inner, test_size=0.2, random_state = 42)
validation, test = train_test_split(test, test_size=0.5, random_state = 42)
label_columns = ['updrs_1', 'updrs_2', 'updrs_3', 'updrs_4']
y_train = train[label_columns]
x_train = train.drop(label_columns, axis=1)
y_validation = validation[label_columns]
x_validation = validation.drop(label_columns, axis=1)
y_test = test[label_columns]
x_test = test.drop(label_columns, axis=1)
print(f"""
y_train.shape is {y_train.shape}
x_train.shape is {x_train.shape}
y_validation.shape is {y_validation.shape}
x_validation.shape is {x_validation.shape}
y_test.shape is {y_test.shape}
x_test.shape is {x_test.shape}""")

def training(model_mode):
    model = {}
    target = ["updrs_1", "updrs_2", "updrs_3", "updrs_4"]
    Y = []
    for u in target:
        i = 0
        j = 0
        temp = train_linear_X.dropna(subset=[u]) 
        if u == 'updrs_3':
            temp = temp[temp[u] != 0]
        X = temp['visit_month']
        y = temp[u]
        Y.append(y)
        X = X.values.reshape(-1, 1)
        trainX = X
        trainy = y
        if(model_mode=='LinearRegression'):
            model_trained = LinearRegression().fit(trainX, trainy)
        elif(model_mode=='RidgeRegression'):
            model_trained = Ridge(alpha=0.1).fit(trainX, trainy)
        elif(model_mode=="BayesianRidge"):
            model_trained = BayesianRidge().fit(trainX, trainy)
        elif(model_mode=='ARDRegression'):
            model_trained = ARDRegression().fit(trainX, trainy)
        elif(model_mode=="SVR"):
            model_trained = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2)).fit(trainX, trainy)
        elif(model_mode=="DecisionTreeRegressor"):
            model_trained = DecisionTreeRegressor(random_state=0).fit(trainX, trainy)
        elif(model_mode=="RandomForestRegressor"):
            model_trained = RandomForestRegressor(max_depth=5, random_state=0).fit(trainX, trainy)
        elif(model_mode=="KNeighborsRegressor"):
            model_trained = KNeighborsRegressor(n_neighbors=3).fit(trainX, trainy)
        elif(model_mode=="SGDRegressor"):
            model_trained = make_pipeline(StandardScaler(), SGDRegressor(max_iter=1000, tol=1e-3)).fit(trainX, trainy)
        else:
            print("no such tarin_mode")
        predY = model_trained.predict(trainX)
        MSE = mean_squared_error(trainy, predY)
        print("target:", u, "MSE:", MSE)

    return model

LinearRegression_model = training('LinearRegression')

RidgeRegression_model = training('RidgeRegression')

BayesianRidge_model = training('BayesianRidge')

ARDRegression_model = training('ARDRegression')

SVR_model = training('SVR')

DecisionTreeRegressor_model = training('DecisionTreeRegressor')

RandomForestRegressor_model = training('RandomForestRegressor')

KNeighborsRegressor_model = training('KNeighborsRegressor')

SGDRegressor_model = training('SGDRegressor')

model_performance['average_MSE'] = model_performance[['updrs_1 MSE', 'updrs_2 MSE', 'updrs_3 MSE', 'updrs_4 MSE']].mean(axis=1)
print(model_performance)
min_index = model_performance['average_MSE'].idxmin()
min_row = model_performance.iloc[min_index]
print("\nModel with the least average MSE and best performance:")
print(min_row['model'])

model_performance

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
colors = ['red', 'blue', 'green', 'orange', 'purple', 'gray', 'pink', 'brown', 'olive']
plt.figure(figsize=(8,6))
plt.bar(model_performance['model'], model_performance['average_MSE'], color=colors)
plt.xticks(rotation=45, ha='right')
plt.xlabel('Model')
plt.ylabel('Average MSE')
plt.title('Comparison of Model Performances')
handles = []
for i in range(len(model_performance)):
    handle = mpatches.Patch(color=colors[i], label=model_performance['model'][i])
    handles.append(handle)
plt.legend(handles=handles, loc='center left', bbox_to_anchor=(1, 0.5))
plt.tight_layout()
plt.show()